name: CT-hackathon workflow

on:
  push:
    branches:
      - main
      - develop

jobs:
#  tests:
#    name: Run tests
#    runs-on: ubuntu-latest
#
#    steps:
#      - uses: actions/checkout@v2
#      - name: Set up Python
#        uses: actions/setup-python@v2
#        with:
#          python-version: 3.11
#
#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip
#          pip install flake8
#
#          pip install -r backend/requirements.txt
#
#      - name: Test with flake8 and django tests
#        run: |
#          python -m flake8
#          pytest

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
#   needs: tests
    steps:
      - name: Uploading project files to remote server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.PORT }}
          source: "backend/,frontend/,infra/"
          target: /home/${{ secrets.USER }}/app

      - name: Building Docker image on remote server and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            cd /home/${{ secrets.USER }}/app/infra
            sudo rm -f .env
            touch .env

            echo LOCAL_DEV=False >> .env
            echo DJANGO_SECRET_KEY="${{ secrets.SECRET_KEY }}" >> .env
            echo CSRF_TRUSTED="${{ secrets.HOST }}" >> .env
            
            echo DB_ENGINE="django.db.backends.postgresql" >> .env
            echo DB_NAME="${{ secrets.DB_NAME }}" >> .env
            echo DB_USER="${{ secrets.DB_USER }}" >> .env
            echo POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}" >> .env
            echo DB_HOST="db" >> .env
            echo DB_PORT="${{ secrets.DB_PORT }}" >> .env
            
            echo ADMIN_USERNAME="${{ secrets.ADMIN_USERNAME }}" >> .env
            echo ADMIN_PASSWORD="${{ secrets.ADMIN_PASSWORD }}" >> .env
            echo ADMIN_EMAIL="${{ secrets.ADMIN_EMAIL }}" >> .env
            echo ADMIN_FIRSTNAME="${{ secrets.ADMIN_FIRSTNAME }}" >> .env
            echo ADMIN_LASTNAME="${{ secrets.ADMIN_LASTNAME }}" >> .env

            sudo docker compose stop
            sudo docker compose rm backend -f
            sudo docker compose up --build -d --force-recreate

#            перенес миграции и статику в docker-compose, чтобы локально тоже походили
#            sudo docker compose exec -T web python manage.py makemigrations
#            sudo docker compose exec -T web python manage.py migrate
#            sudo docker compose exec -T web python manage.py superuser
#            sudo docker compose exec -T web python manage.py collectstatic --no-input
